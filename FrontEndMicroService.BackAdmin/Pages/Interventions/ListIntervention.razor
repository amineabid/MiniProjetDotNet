@page "/interventions"
@inject IInterventionsService api
@inject IDialogService DialogService
@inject ISnackbar snackBar

    <MudTable 
        ServerData="@(new Func<TableState, Task<TableData<Intervention>>>(ServerReload))"
          FixedHeader="true"
          Elevation="25"
          MultiSelection="false"
          @ref="table"
            @bind-customer="Intervention"
          SortLabel="Sort By"
          Height="@("400px")"
        >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Interventions</MudText>
            @*<MudSpacer />
            <MudButton 
                Variant="Variant.Filled" 
                Disabled="false" 
                Color="Color.Primary"
                OnClick="@((e) => Save())">
                Ajouter Intervention
            </MudButton>*@
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearchValue(s))" Placeholder="Recherche Interventions..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </ToolBarContent>
        <ColGroup>

            <col style="width: 20%;" />
            <col style="width: 20%;" />
            <col style="width: 20%;" />
            <col style="width: 20%;" />
            <col style="width: 20%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Intervention, object>(x=>x.Id)">Numero Intervention</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Intervention, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Intervention, object>(x=>x.Reclamation.Name)">Reclamation</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Intervention, object>(x=>x.garantie)">Garantie </MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Description</MudTd>
        <MudTd DataLabel="Name">
            <MudBadge Content="@context.Reclamation.Name" Overlap="true" Class="mx-6 my-4"></MudBadge><br />
            <MudBadge Content="@context.Reclamation.Email" Overlap="true" Class="mx-6 my-4"></MudBadge><br />
            <MudBadge Content="@context.Reclamation.Description" Overlap="true" Class="mx-6 my-4"></MudBadge>
        </MudTd>
        <MudTd DataLabel="garantie">@context.garantie</MudTd>
            <MudTd DataLabel="">
                <MudFab Disabled="false" @onclick="@((e)=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@((e)=>Delete(@context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@((e)=>ShowReclamation(@context.Id))" Color="Color.Error" Icon="@Icons.Filled.FormatListBulleted" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>

        </RowTemplate>
    </MudTable>



@code {
    private List<Intervention> lsIntervention = new List<Intervention>();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private MudTable<Intervention> table;

    private bool showDialog = false;
    private bool _hidePosition;
    private bool _loading;
    private string searchString1 = "";
    int totalItems = 0;
    protected override async Task OnInitializedAsync()
    {
        //lsIntervention = await api.GetAll();
        //if (lsIntervention == null)
        //{
        //    //erreur
        //    lsIntervention = new List<Intervention>();
        //}
    }
    private async Task<TableData<Intervention>> ServerReload(TableState state)
    {
        lsIntervention = await api.GetAll();
        //await Task.Delay(300);
        FilterCustmers();
        totalItems = lsIntervention.Count();
        
        //clients = clients.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return new TableData<Intervention>() { TotalItems = totalItems, Items = lsIntervention };
    }
    private async void FilterCustmers()
    {
        if (!string.IsNullOrWhiteSpace(searchString1))
        {
            lsIntervention = lsIntervention.AsParallel().Where(a =>
                   (a.Description != null ? a.Description.Contains(searchString1, StringComparison.OrdinalIgnoreCase) : false)
                || (a.Id != 0 ? a.Id.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) : false)
            ).ToList();
        }



    }

    private void OnSearchValue(string text)
    {
        searchString1 = text;
        table.ReloadServerData();
    }

    Intervention Intervention = new Intervention();
    private async void Save()
    {
        var parameters = new DialogParameters();

        Intervention = new Intervention();
        parameters.Add("Intervention", Intervention);
        var dialog = DialogService.Show<CreateIntervention>("Ajouter Intervention", parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (string.IsNullOrEmpty(Intervention.Description))
            {
                snackBar.Add("Les champs : Nom sont obligatoires.", Severity.Error);
            }
            else
            {
                await api.Create(Intervention);
                Intervention = new Intervention();
                snackBar.Add("Intervention Ajoutée.", Severity.Success);
                await table.ReloadServerData();

            }

            StateHasChanged();
        }

    }

    private async void Edit(int id)
    {
        Intervention = lsIntervention.FirstOrDefault(c => c.Id == id);
        var parameters = new DialogParameters();


        parameters.Add("Intervention", Intervention);
        var dialog = DialogService.Show<CreateIntervention>("Modifier Intervention", parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (Intervention.Id == 0 || string.IsNullOrEmpty(Intervention.Description))
            {
                snackBar.Add("Les champs : Nom Artcile sont obligatoires.", Severity.Error);
            }
            else
            {
                await api.Edit(Intervention);
                Intervention = new Intervention();
                snackBar.Add("Intervention Modifé.", Severity.Success);
                await table.ReloadServerData();
            }

            StateHasChanged();
        }
    }
    private async void ShowReclamation(int id)
    {
        Intervention = lsIntervention.FirstOrDefault(c => c.Id == id);
        var parameters = new DialogParameters();


        parameters.Add("ArtcileId", Intervention.Id);
        //var dialog = DialogService.Show<ListPiece>("Liste Piece de l'Intervention " + Intervention.Name, parameters, maxWidth);
        //var result = await dialog.Result;
        //if (!result.Cancelled)
        //{
            
        //}
    }
    private async void Delete(int id)
    {

        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Supprimer Intervention",
            yesText: "Supprimer!", cancelText: "Annuler");
        if (result == null)
        {
            snackBar.Add("Annulée " + "La Supprission d'artcile .", Severity.Warning);
        }
        else
        {
            await api.Delete(id);
            snackBar.Add("Artcile Supprimée.", Severity.Success);

        }
        await table.ReloadServerData();
        StateHasChanged();

    }


}
